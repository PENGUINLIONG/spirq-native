#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


enum SqAccessType {
  /**
   * The variable can be accessed by read.
   */
  SqAccessType_ReadOnly = 1,
  /**
   * The variable can be accessed by write.
   */
  SqAccessType_WriteOnly = 2,
  /**
   * The variable can be accessed by read or by write.
   */
  SqAccessType_ReadWrite = 3,
};
typedef uint32_t SqAccessType;

enum SqImageArrangement {
  SqImageArrangement_Image1D,
  SqImageArrangement_Image2D,
  SqImageArrangement_Image2DMS,
  SqImageArrangement_Image3D,
  SqImageArrangement_CubeMap,
  SqImageArrangement_Image1DArray,
  SqImageArrangement_Image2DArray,
  SqImageArrangement_Image2DMSArray,
  SqImageArrangement_CubeMapArray,
  SqImageArrangement_Image2DRect,
  SqImageArrangement_ImageBuffer,
};
typedef uint32_t SqImageArrangement;

enum SqImageFormat {
  SqImageFormat_Rgba32f,
  SqImageFormat_Rgba16f,
  SqImageFormat_R32f,
  SqImageFormat_Rgba8,
  SqImageFormat_Rgba8Snorm,
  SqImageFormat_Rg32f,
  SqImageFormat_Rg16f,
  SqImageFormat_R11fG11fB10f,
  SqImageFormat_R16f,
  SqImageFormat_Rgba16,
  SqImageFormat_Rgb10A2,
  SqImageFormat_Rg16,
  SqImageFormat_Rg8,
  SqImageFormat_R16,
  SqImageFormat_R8,
  SqImageFormat_Rgba16Snorm,
  SqImageFormat_Rg16Snorm,
  SqImageFormat_Rg8Snorm,
  SqImageFormat_R16Snorm,
  SqImageFormat_R8Snorm,
  SqImageFormat_Rgba32i,
  SqImageFormat_Rgba16i,
  SqImageFormat_Rgba8i,
  SqImageFormat_R32i,
  SqImageFormat_Rg32i,
  SqImageFormat_Rg16i,
  SqImageFormat_Rg8i,
  SqImageFormat_R16i,
  SqImageFormat_R8i,
  SqImageFormat_Rgba32ui,
  SqImageFormat_Rgba16ui,
  SqImageFormat_Rgba8ui,
  SqImageFormat_R32ui,
  SqImageFormat_Rgb10a2ui,
  SqImageFormat_Rg32ui,
  SqImageFormat_Rg16ui,
  SqImageFormat_Rg8ui,
  SqImageFormat_R16ui,
  SqImageFormat_R8ui,
};
typedef uint32_t SqImageFormat;

enum SqScalarRepr {
  SqScalarRepr_Boolean,
  SqScalarRepr_SignedInt,
  SqScalarRepr_UnsignedInt,
  SqScalarRepr_SignedFloat,
};
typedef uint32_t SqScalarRepr;

enum SqSubpassDataArrangement {
  SqSubpassDataArrangement_SubpassData,
  SqSubpassDataArrangement_SubpassDataMS,
};
typedef uint32_t SqSubpassDataArrangement;

typedef int32_t SqResult;

typedef struct SqScalarType {
  SqScalarRepr repr;
  uint32_t nbyte;
} SqScalarType;

typedef int32_t SqBool32;

typedef struct SqStructMember {
  const char *name;
  size_t offset;
  const struct SqType *ty;
} SqStructMember;

typedef enum SqType_Tag {
  SqType_Void,
  SqType_Numeric,
  SqType_Matrix,
  SqType_Image,
  SqType_SampledImage,
  SqType_Sampler,
  SqType_SubpassData,
  SqType_Array,
  SqType_Struct,
  SqType_AccelStruct,
} SqType_Tag;

typedef struct SqType_Numeric_Body {
  struct SqScalarType scalar_ty;
  uint32_t nlane;
} SqType_Numeric_Body;

typedef struct SqType_Matrix_Body {
  struct SqScalarType scalar_ty;
  uint32_t nrow;
  uint32_t ncolumn;
} SqType_Matrix_Body;

typedef struct SqType_Image_Body {
  struct SqScalarType scalar_ty;
  SqImageFormat fmt;
  SqImageArrangement arng;
} SqType_Image_Body;

typedef struct SqType_SampledImage_Body {
  struct SqScalarType scalar_ty;
  SqBool32 is_depth;
  SqImageArrangement arng;
} SqType_SampledImage_Body;

typedef struct SqType_SubpassData_Body {
  SqSubpassDataArrangement arng;
} SqType_SubpassData_Body;

typedef struct SqType_Array_Body {
  const struct SqType *proto_ty;
  uint32_t nelem;
  size_t stride;
} SqType_Array_Body;

typedef struct SqType_Struct_Body {
  const char *name;
  const struct SqStructMember *members;
} SqType_Struct_Body;

typedef struct SqType {
  SqType_Tag tag;
  union {
    SqType_Numeric_Body numeric;
    SqType_Matrix_Body matrix;
    SqType_Image_Body image;
    SqType_SampledImage_Body sampled_image;
    SqType_SubpassData_Body subpass_data;
    SqType_Array_Body array;
    SqType_Struct_Body struct_;
  };
} SqType;

typedef enum SqDescriptorType_Tag {
  /**
   * `VK_DESCRIPTOR_TYPE_SAMPLER`
   */
  SqDescriptorType_Sampler,
  /**
   * `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`
   */
  SqDescriptorType_CombinedImageSampler,
  /**
   * `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`
   */
  SqDescriptorType_SampledImage,
  /**
   * `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`
   */
  SqDescriptorType_StorageImage,
  /**
   * `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`.
   */
  SqDescriptorType_UniformTexelBuffer,
  /**
   * `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`.
   */
  SqDescriptorType_StorageTexelBuffer,
  /**
   * `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
   * `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` depending on how you gonna
   * use it.
   */
  SqDescriptorType_UniformBuffer,
  /**
   * `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
   * `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` depending on how you gonna
   * use it.
   */
  SqDescriptorType_StorageBuffer,
  /**
   * `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` and its input attachment index.
   */
  SqDescriptorType_InputAttachment,
  /**
   * `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR`
   */
  SqDescriptorType_AccelStruct,
} SqDescriptorType_Tag;

typedef struct SqDescriptorType_Sampler_Body {

} SqDescriptorType_Sampler_Body;

typedef struct SqDescriptorType_CombinedImageSampler_Body {

} SqDescriptorType_CombinedImageSampler_Body;

typedef struct SqDescriptorType_SampledImage_Body {

} SqDescriptorType_SampledImage_Body;

typedef struct SqDescriptorType_UniformTexelBuffer_Body {

} SqDescriptorType_UniformTexelBuffer_Body;

typedef struct SqDescriptorType_UniformBuffer_Body {

} SqDescriptorType_UniformBuffer_Body;

typedef struct SqDescriptorType_AccelStruct_Body {

} SqDescriptorType_AccelStruct_Body;

typedef struct SqDescriptorType {
  SqDescriptorType_Tag tag;
  union {
    SqDescriptorType_Sampler_Body sampler;
    SqDescriptorType_CombinedImageSampler_Body combined_image_sampler;
    SqDescriptorType_SampledImage_Body sampled_image;
    struct {
      SqAccessType storage_image;
    };
    SqDescriptorType_UniformTexelBuffer_Body uniform_texel_buffer;
    struct {
      SqAccessType storage_texel_buffer;
    };
    SqDescriptorType_UniformBuffer_Body uniform_buffer;
    struct {
      SqAccessType storage_buffer;
    };
    struct {
      uint32_t input_attachment;
    };
    SqDescriptorType_AccelStruct_Body accel_struct;
  };
} SqDescriptorType;

typedef enum SqVariable_Tag {
  SqVariable_Input,
  SqVariable_Output,
  SqVariable_Descriptor,
  SqVariable_PushConstant,
  SqVariable_SpecConstant,
} SqVariable_Tag;

typedef struct SqVariable_Input_Body {
  const char *name;
  uint32_t location;
  uint32_t component;
  const struct SqType *ty;
} SqVariable_Input_Body;

typedef struct SqVariable_Output_Body {
  const char *name;
  uint32_t location;
  uint32_t component;
  const struct SqType *ty;
} SqVariable_Output_Body;

typedef struct SqVariable_Descriptor_Body {
  const char *name;
  uint32_t binding;
  uint32_t set;
  struct SqDescriptorType desc_ty;
  const struct SqType *ty;
  uint32_t nbind;
} SqVariable_Descriptor_Body;

typedef struct SqVariable_PushConstant_Body {
  const char *name;
  const struct SqType *ty;
} SqVariable_PushConstant_Body;

typedef struct SqVariable_SpecConstant_Body {
  const char *name;
  uint32_t spec_id;
  const struct SqType *ty;
} SqVariable_SpecConstant_Body;

typedef struct SqVariable {
  SqVariable_Tag tag;
  union {
    SqVariable_Input_Body input;
    SqVariable_Output_Body output;
    SqVariable_Descriptor_Body descriptor;
    SqVariable_PushConstant_Body push_constant;
    SqVariable_SpecConstant_Body spec_constant;
  };
} SqVariable;

typedef struct SqEntryPoint {
  const char *name;
  const struct SqVariable *vars;
} SqEntryPoint;

typedef struct SqReflectQuery {
  const struct SqEntryPoint *entry_points;
} SqReflectQuery;

typedef struct SqReflectConfig {
  const uint32_t *spirv;
  size_t spirvSize;
  SqBool32 referenceAllResources;
  SqBool32 combineImageSamplers;
} SqReflectConfig;

#define SQ_ERROR_CORRUPTED_SPIRV -1

#define SQ_ERROR_UNSUPPORTED_SPIRV -2

#define SQ_FALSE 0

#define SQ_SUCCESS 0

#define SQ_TRUE 1

SqResult sqCreateReflectQuery(struct SqReflectQuery *query);

void sqDestroyReflectQuery(struct SqReflectQuery *query);

void sqReflect(const struct SqReflectConfig *cfg, struct SqReflectQuery *query);
